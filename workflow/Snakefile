import pandas as pd 
from os.path import dirname, basename
configfile: "config/config.yaml"

# Todo: add schema validation to config, samples files...
samples = pd.read_csv(config["samples"], sep = '\t').set_index("sample", drop=False)

rule all:
    input:
        expand("results/rsem/{sample}_{genome}/{sample}_{genome}.isoforms.results", sample=samples.index, genome = config["genome"]["build"])

rule star_index:
    input:
        fasta = config["genome"]["fasta"],
        gtf = config["genome"]["annotation"]
    output:
        directory("results/star/index/{genome}")
    message:
        "Building STAR index..."
    threads: 16
    conda:
        "envs/star.yaml"
    envmodules:
        "star/2.7.9a"
    shell:
        """
        STAR --runMode genomeGenerate \
        --genomeDir {output} \
        --genomeFastaFiles {input.fasta} \
        --sjdbGTFfile {input.gtf}
        """

rule star_pe_single:
    input:
        genome = "results/star/index/{genome}",
        R1 = lambda wc: samples.loc[wc.sample, "R1_fastq"], # directs to fastq files
        R2 = lambda wc: samples.loc[wc.sample, "R2_fastq"]
    output:
        # see STAR manual for additional output files
        "results/star-pe/{sample}_{genome}/Aligned.sortedByCoord.out.bam",
        "results/star-pe/{sample}_{genome}/Aligned.toTranscriptome.out.bam",
        "results/star-pe/{sample}_{genome}/SJ.out.tab"
    threads: 12
    params:
        prefix = "results/star-pe/{sample}_{genome}/",
        threads = 24
    conda: 
        "envs/star.yaml"
    envmodules:
        "star/2.7.9a"
    shell:
        """
        STAR \
		--genomeDir {input.genome} \
		--readFilesIn {input.R1} {input.R2} \
		--readFilesCommand zcat \
		--outFileNamePrefix {params.prefix} \
		--runThreadN {params.threads} \
		--quantMode TranscriptomeSAM GeneCounts \
		--outSAMtype BAM SortedByCoordinate
        """

rule rsem_prepare_reference:
    input:
        fasta = config["genome"]["fasta"],
        gtf = config["genome"]["annotation"]
    output:
        "results/rsem-index/{genome}/{genome}.idx.fa"
    params:
        prefix = lambda wc, output: dirname(output[0]) + "/{0}".format(wc.genome)
    threads:
        8
    conda: 
        "envs/rsem.yaml"
    envmodules:
        "rsem/1.3.0"
    shell:
        """
        rsem-prepare-reference \
        --gtf {input.gtf} \
        --num-threads {threads} \
        {input.fasta} \
        {params.prefix}
        """

rule rsem_calculate_expression:
    input:
        genome = "results/rsem-index/{genome}/{genome}.idx.fa",
        transcripts = "results/star-pe/{sample}_{genome}/Aligned.toTranscriptome.out.bam"
    output:
        "results/rsem/{sample}_{genome}/{sample}_{genome}.isoforms.results" # Todo: figure out what output RSEM generates! 
    params:
        output_prefix = lambda wc, output: dirname(output[0]) + "/{0}_{1}".format(wc.sample, wc.genome),
        genome_prefix = "results/rsem-index/{genome}/{genome}", # Todo: make match input
        threads = 16
    threads:
        8 
    conda:
        "envs/rsem.yaml"
    envmodules:
        "rsem/1.3.0"
    shell:
        """
        rsem-calculate-expression \
        --alignments \
        --strandedness none \
        --paired-end \
        --num-threads {params.threads} \
        {input.transcripts} \
        {params.genome_prefix} \
        {params.output_prefix}
        """
        # Check strandedness of library, perhaps push to config!
    
